import { useState } from 'react';
import { useSelector } from 'react-redux';
import { Sparkle, MapPin, Info } from 'lucide-react';
import { Link, useNavigate } from 'react-router';
import { toast } from 'sonner';
import { Tooltip } from 'react-tooltip'

import reportService from '../../supabase/table';
import storageService from '../../supabase/storage';
import Input from '../../components/Input';

function CreateReport() {
  const navigate = useNavigate();
  const user = useSelector((state) => state.auth.userData);
  const ai_or_not_api_key = import.meta.env.VITE_AIORNOT_API_KEY;

  if (user?.user_metadata?.role !== 'user') {
    navigate('/');
  }

  const [loading, setLoading] = useState(false);
  const [file, setFile] = useState(null);


  const [reportingBtnText, setReportingBtnText] = useState('Report Issue');

  const [reportData, setReportData] = useState({
    image: '',
    description: '',
    lgd_ward_code: '',
    createdByName: user?.user_metadata?.display_name || '',
    createdById: user?.id || '',
    lat: 0,
    lng: 0,
    city: '',
    state: '',
    status: 'Pending'
  });

  const handleFileChange = async (e) => {
    setFile(e.target.files[0]);
    if (!file) return;
  }

  const handleInputChange = (e) => {
    setReportData({ ...reportData, [e.target.name]: e.target.value });
  };

  const getLocation = () => {
    return new Promise((resolve, reject) => {
      navigator.geolocation.getCurrentPosition(resolve, reject);
    });
  };

  const convertImageToBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  };

  const submitReport = async () => {

    if (!file) {
      alert('Please upload an image.');
      return;
    }

    setLoading(true);
    setReportingBtnText('Reporting...');

    // 1. Get user's coordinates
    const position = await getLocation();
    const { latitude, longitude } = position.coords;

    // 2. Reverse geocode to get city & state
    const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`;
    const response = await fetch(url);
    const data = await response.json();

    const newCity = data?.address.city || data?.address.town || data?.address.village || "Not Found";
    const newState = data?.address.state || "Not Found";

    // 3. Update reportData before submission
    const updatedReportData = {
      ...reportData,
      lat: latitude,
      lng: longitude,
      city: newCity,
      state: newState
    };
    setReportData(updatedReportData);

    // check image is generated by AI
    setReportingBtnText('Analyzing Image...');

    const formData = new FormData();
    formData.append("image", file);

    try {
      const response = await fetch("https://api.aiornot.com/v2/image/sync", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${ai_or_not_api_key}`,
        },
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`Failed: ${response.status} ${await response.text()}`);
      }

      const responseData = await response.json();

      if (responseData.report.ai_generated.verdict === "ai") {
        toast.error("The image is detected as AI-generated. Please upload a human-captured image.");
        setLoading(false);
        setReportingBtnText('Report Issue');
        return;

      } else if (responseData.report.ai_generated.verdict === "human") {
        setReportingBtnText('Uploading Image...');
        toast.success("The image is verified as human-captured. Now checking image and description.");

      } else {
        toast.error("Unable to determine if the image is AI-generated.");
        setLoading(false);
        setReportingBtnText('Report Issue');
        return;
      }
    } catch (error) {
      console.error("Error:", error);
      toast.error("Something went wrong. Check the console.");
      setLoading(false);
      setReportingBtnText('Report Issue');
      return;
    }

    // Check Image is spam or not
    setReportingBtnText('Checking Image...');

    // For local development
    // const SERVER_URL = 'http://localhost:8000';

    // For production
    const SERVER_URL = import.meta.env.VITE_API_URL;
    
    try {
      const imageBase64 = await convertImageToBase64(file);
      const description = reportData.description;

      const response = await fetch(`${SERVER_URL}/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          image: imageBase64,
          description: description
        })
      });

      const data = await response.json();

      if (data.success === false) {
        toast.error('Error analyzing image: ' + data.message);
        console.log('Error analyzing image: ' + data.message);
        setLoading(false);
        setReportingBtnText('Report Issue');
        return;
      }

      console.log('Analysis Result:', data);
      const updatedReportData = {
        ...reportData, category: data.category || 'Other'
      };
      setReportData(updatedReportData);

    } catch (error) {
      console.error('Error:', error);
      setLoading(false);
      setReportingBtnText('Report Issue');
      return;
    }

    // upload file to supabase storage
    toast.success('Image looks good. Uploading the report...');
    setReportingBtnText('Uploading Image...');

    const fileUrl = await storageService.uploadImage(file);

    if (fileUrl.status === 'error') {
      toast.error('Error uploading image: ' + fileUrl.msg);
      setLoading(false);
      return;
    }
    const fileSupabaseUrl = fileUrl.data.path;  // public/filename12345

    // get public url of the uploaded file
    updatedReportData.image = storageService.getImageUrl(fileSupabaseUrl).data;

    // Submit the report
    const res = await reportService.createReport(updatedReportData);

    // Handle response
    if (res.status === 'success') {
      toast.success('Report submitted successfully!');
      navigate('/');
      setLoading(false);
    }
    else {
      toast.error('Error while submitting');
      console.log(res.msg);
      setLoading(false);
    }
  };

  return (
    <div>
      <h1 className="text-4xl dark:text-white">Report Your Issue</h1>
      <form className="mt-4 flex flex-col gap-4" onSubmit={(e) => {
        e.preventDefault();
        submitReport();
      }}>
        <div className="flex flex-col bg-white border border-gray-200 shadow-2xs rounded-xl dark:bg-neutral-900 dark:border-neutral-700 dark:shadow-neutral-700/70">
          <div className="p-4 md:p-5">
            <div className='flex w-full'>
              <div className='bg-blue-100 box-border size-12 mr-4 flex justify-center items-center rounded-lg'>
                <Sparkle color='oklch(54.6% 0.245 262.881)' />
              </div>
              <div className='w-full'>
                <h3 className="text-lg font-bold text-gray-800 dark:text-white">
                  Upload Image
                </h3>
                <p className="w-fit text-gray-500 dark:text-neutral-400">
                  Smart image detection. Click the button below to add image related to the issue.
                </p>
              </div>
            </div>
            <div className="max-w-sm mt-4">
              <label className="block">
                <span className="sr-only">Choose profile photo</span>
                <input name='image' onChange={(e) => handleFileChange(e)} type="file" className="block w-full text-sm text-gray-500 file:me-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-600 file:text-white hover:file:bg-blue-700" required />
              </label>
            </div>
          </div>
        </div>

        <div>
          <label htmlFor="textarea-label" className="block text-sm font-medium mb-2 dark:text-white">Describe the above reported image</label>
          <textarea className="py-2 px-3 sm:py-3 sm:px-4 block w-full border border-gray-200 rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500"
            rows="3"
            required
            name='description'
            id="textarea-label"
            placeholder="Example: Broken street light near the park."
            onChange={(e) => handleInputChange(e)}
          ></textarea>
        </div>

        <div className="w-full">
          <Input
            label="Ward No./LGD code of issue location"
            type="text"
            placeholder="Example: 106476"
            required
            onChange={(e) => handleInputChange(e)}
            name="lgd_ward_code"
          />
          <p className='flex items-center text-sm text-gray-500 mt-2'>
            <a data-tooltip-id="my-tooltip" data-tooltip-content="LGD Ward Code comes from the Local Government Directory (LGD) maintained by the Ministry of Panchayati Raj, Government of India. Municipalities sometimes publish ward maps with LGD codes on their websites." className='w-fit mr-2'><Info size={20} /></a>
            Every sub district has a unique LGD code. Find the LGD code
            <a className='text-sky-700 underline ml-1' href="https://lgdirectory.gov.in/" target="_blank"> here</a>.
          </p>


          <Tooltip id="my-tooltip" style={{ width: '300px' }} />

        </div>

        <p className='flex items-center text-gray-500 mt-3'><MapPin size="18" className='mr-1' /> Using your current location</p>

        <button disabled={loading} type="submit" className={`w-full py-3 px-4 ${loading ? 'bg-gray-600 cursor-not-allowed' : ' hover:bg-blue-700 cursor-pointer'} inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white`}>
          {reportingBtnText}
        </button>
      </form>
    </div>
  );
}

export default CreateReport;
